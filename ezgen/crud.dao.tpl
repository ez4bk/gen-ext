// Code generated by ezgen. DO NOT EDIT.
// Code generated by ezgen. DO NOT EDIT.
// Code generated by ezgen. DO NOT EDIT.

package dao

import (
	"context"
	"reflect"

	"{{.ModelPackage}}/internal/constants"
	"{{.ModelPackage}}/internal/dao/model"
	"{{.ModelPackage}}/internal/dao/query"

	"{{.ModelPackage}}/cmd/gen/ezgen"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	{{range .ImportPkgPaths}}{{.}} ` + "\n" + `{{end}}
)

// List{{.ModelName}}Params represents the params to list models
type List{{.ModelName}}Params struct {
	ezgen.Pager

{{range $element := .ParamsKey}}
    {{$element}}
{{- end}}

	Deleted bool // optional
	Cached constants.CacheMode // optional
}

func (dao *{{.DaoName}}) Add(ctx context.Context, data ...*model.{{.ModelName}}) (err error) {
	q := query.Use(dao.db).{{.ModelName}}
    return q.WithContext(ctx).Create(data...)
}

func (dao *{{.DaoName}}) Get(ctx context.Context, id {{.PKType}}, opts ...GetOption) (result *model.{{.ModelName}}, err error) {
	cfg := &getConfig{}
	for _, opt := range opts { opt(cfg) }
	switch cfg.Cached {
    	case constants.ModeCached:
    		ctx = context.WithValue(ctx, constants.ModeKey, constants.ModeCached)
    	case constants.ModeWarm:
    		ctx = context.WithValue(ctx, constants.ModeKey, constants.ModeWarm)
    	default:
	}
	err = dao.db.WithContext(ctx).Table(model.TableName{{.ModelName}}).
		Preload(clause.Associations).
		Scopes(ezgen.WithDeleted(cfg.WithDeleted)).
		Where("{{ .PrimaryField }} = ?", id).
		First(&result).
		Error
	if err != nil {
		return nil, err
	}

	return result, nil
}

func (dao *{{.DaoName}}) List(ctx context.Context, params *List{{.ModelName}}Params) (list []*model.{{.ModelName}}, total int64, err error) {
	if params == nil {
		params = &List{{.ModelName}}Params{}
	}
	switch params.Cached {
	case constants.ModeCached:
		ctx = context.WithValue(ctx, constants.ModeKey, constants.ModeCached)
	case constants.ModeWarm:
		ctx = context.WithValue(ctx, constants.ModeKey, constants.ModeWarm)
	default:
	}
	tx := dao.db.WithContext(ctx).Table(model.TableName{{.ModelName}}).
		Preload(clause.Associations).
		Scopes(ezgen.WithDeleted(params.Deleted)).
		Scopes(ezgen.Paginate(params.Pager)).
	{{- range $element := .ParamsScopes}}
        {{$element}}
    {{- end}}
	{{ if .Desc }}
		Order("{{ .SortField }} desc")
	{{ else }}
		Order("{{ .SortField }} asc")
	{{ end }}

	total, err = ezgen.FindAndCountTransaction(tx, &list)
	if err != nil {
		return nil, 0, err
	}

	return list, total, nil
}

func (dao *{{.DaoName}}) Update(ctx context.Context, data *model.{{.ModelName}}) (err error) {
	return dao.db.WithContext(ctx).Table(model.TableName{{.ModelName}}).Updates(data).Error
}

func (dao *{{.DaoName}}) Delete(ctx context.Context, id {{.PKType}}) (err error) {
	return dao.db.WithContext(ctx).Table(model.TableName{{.ModelName}}).
		Delete(&model.{{.ModelName}}{}, id).Error
}

func (dao *{{.DaoName}}) Destroy(ctx context.Context, id {{.PKType}}) (err error) {
	return dao.db.WithContext(ctx).Table(model.TableName{{.ModelName}}).
		Unscoped().
		Delete(&model.{{.ModelName}}{}, id).Error
}
