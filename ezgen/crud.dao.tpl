// Code generated by gen-ext. DO NOT EDIT.

package dao

import (
	"context"
	"reflect"

	"{{.ModelPackage}}/internal/dao/model"

	"github.com/ez4bk/gen-ext/ezgen"
	"gorm.io/gorm"
	{{range .ImportPkgPaths}}{{.}} ` + "\n" + `{{end}}
)

type {{.DaoName}} struct {
	db *gorm.DB
}

// List{{.ModelName}}Params represents the params to list models
type List{{.ModelName}}Params struct {
	ezgen.Pager

{{range $element := .ParamsKey}}
    {{$element}}
{{- end}}

	Deleted bool // optional
}

func (dao *{{.DaoName}}) Get(ctx context.Context, id {{.PKType}}, withDeleted ...bool) (result *model.{{.ModelName}}, err error) {
	err = dao.db.WithContext(ctx).Table(model.TableName{{.ModelName}}).
		Scopes(ezgen.WithDeletedList(withDeleted)).
		Where("{{ .PrimaryField }} = ?", id).
		First(&result).
		Error
	if err != nil {
		return nil, err
	}

	return result, nil
}

func (dao *{{.DaoName}}) GetList(ctx context.Context, id []{{.PKType}}, withDeleted ...bool) (list []*model.{{.ModelName}}, err error) {
	err = dao.db.WithContext(ctx).Table(model.TableName{{.ModelName}}).
		Scopes(ezgen.WithDeletedList(withDeleted)).
		Where("{{ .PrimaryField }} IN ?", id).
		Find(&list).
		Error
	if err != nil {
		return nil, err
	}

	return list, nil
}

// List returns the specified models from database by params
func (dao *{{.DaoName}}) List(ctx context.Context, params *List{{.ModelName}}Params) (list []*model.{{.ModelName}}, total int64, err error) {
	tx := dao.db.WithContext(ctx).Table(model.TableName{{.ModelName}}).
		Scopes(ezgen.WithDeleted(params.Deleted)).
		Scopes(ezgen.Paginate(params.Pager)).
	{{- range $element := .ParamsScopes}}
        {{$element}}
    {{- end}}
	{{ if .Desc }}
		Order("{{ .PrimaryField }} desc")
	{{ else }}
		Order("{{ .PrimaryField }} asc")
	{{ end }}

	total, err = ezgen.FindAndCountTransaction(tx, &list)
	if err != nil {
		return nil, 0, err
	}

	return list, total, nil
}

func (dao *{{.DaoName}}) Update(ctx context.Context, model *model.{{.ModelName}}, cols ...string) error {
	return dao.db.WithContext(ctx).
		Model(model).
		Select(cols).
		Updates(model).
		Error
}

func (dao *{{.DaoName}}) DeleteByID(ctx context.Context, id {{.PKType}}) error {
	return dao.db.WithContext(ctx).Table(model.TableName{{.ModelName}}).
		Delete(&model.{{.ModelName}}{}, id).Error
}

func (dao *{{.DaoName}}) Destroy(ctx context.Context, id {{.PKType}}) error {
	return dao.db.WithContext(ctx).Table(model.TableName{{.ModelName}}).
		Unscoped().
		Delete(&model.{{.ModelName}}{}, id).Error
}
